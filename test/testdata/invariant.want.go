// Code generated by dbc4go, DO NOT EDIT.
package testdata

// @invariant a > 0
type foo struct {
	a int
}

func (f foo) f() {
	{ // Open contract scope
		// Type invariants
		{
			cond := func() bool { return a > 0 }
			if !cond() {
				panic("(type invariant) function caller didn't satisfy a > 0")
			}
		}
		defer func() {
			{
				cond := func() bool { return a > 0 }
				if !cond() {
					panic("function didn't satisfy a > 0")
				}
			}
		}()
	} // Close contract scope
}

// Contract:
//   - invariant b != ""
type bar struct {
	b string
}

func (b bar) b() {
	{ // Open contract scope
		// Type invariants
		{
			cond := func() bool { return b != "" }
			if !cond() {
				panic("(type invariant) function caller didn't satisfy b != \"\"")
			}
		}
		defer func() {
			{
				cond := func() bool { return b != "" }
				if !cond() {
					panic("function didn't satisfy b != \"\"")
				}
			}
		}()
	} // Close contract scope
}
