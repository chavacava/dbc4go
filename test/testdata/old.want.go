// Code generated by dbc4go, DO NOT EDIT.
package testdata

// @ensures @old{a} == a
func old1(a any) {
	{ // Open contract scope
		// Function's contracts
		old_1 := a
		defer func() {
			{
				cond := func() bool { return old_1 == a }
				if !cond() {
					panic("function didn't satisfy @old{a} == a")
				}
			}
		}()
	} // Close contract scope

}

// @ensures @old{a.b} == a
func old2(a any) {
	{ // Open contract scope
		// Function's contracts
		old_1 := a.b
		defer func() {
			{
				cond := func() bool { return old_1 == a }
				if !cond() {
					panic("function didn't satisfy @old{a.b} == a")
				}
			}
		}()
	} // Close contract scope

}

// @ensures @old{a.b + 1} == a
func old3(a any) {
	{ // Open contract scope
		// Function's contracts
		old_1 := a.b + 1
		defer func() {
			{
				cond := func() bool { return old_1 == a }
				if !cond() {
					panic("function didn't satisfy @old{a.b + 1} == a")
				}
			}
		}()
	} // Close contract scope

}

// @ensures a == 0 ==> @old{a.b}
func old4(a any) {
	{ // Open contract scope
		// Function's contracts
		old_1 := a.b
		defer func() {
			{
				cond := func() bool {
					cond1 := func() bool { return a == 0 }
					cond2 := func() bool { return old_1 }
					return !cond1() || cond2()
				}
				if !cond() {
					panic("function didn't satisfy a == 0 ==> @old{a.b}")
				}
			}
		}()
	} // Close contract scope

}
