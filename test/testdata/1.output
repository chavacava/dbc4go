// Code generated by dbc4go, DO NOT EDIT.
//go:generate dbc4go -i $GOFILE -o $GOFILE

package contract

import (
	"go/ast"
)

// FuncContract represents a contract associated to a function
type FuncContract struct {
	requires []Requires
	ensures  []Ensures
	target   *ast.FuncDecl
}

// NewFuncContract creates a FuncContract
// @requires [not nil target] target != nil
// @ensures c.target == target
// @ensures len(c.requires) == 0
// @ensures len(c.ensures) == 0
func NewFuncContract(target *ast.FuncDecl) (c FuncContract) {
	if !(target != nil) {
		panic("@requires [not nil target] target != nil not satisfied")
	}
	defer func() {

		if !(c.target == target) {
			panic("@ensures c.target == target not satisfied")
		}
		if !(len(c.requires) == 0) {
			panic("@ensures len(c.requires) == 0 not satisfied")
		}
		if !(len(c.ensures) == 0) {
			panic("@ensures len(c.ensures) == 0 not satisfied")
		}
	}()
	return FuncContract{requires: []Requires{}, ensures: []Ensures{}, target: target}
}

// @ensures t != nil
func (c *FuncContract) Target() (t *ast.FuncDecl) {
	defer func() {
		if !(t != nil) {
			panic("@ensures t != nil not satisfied")
		}
	}()
	return c.target
}

// AddRequires adds a requires to this contract
// @ensures c.requires[len(c.requires)-1] == r
func (c *FuncContract) AddRequires(r Requires) {
	defer func() {
		if !(c.requires[len(c.requires)-1] == r) {
			panic("@ensures c.requires[len(c.requires)-1] == r not satisfied")
		}
	}()
	c.requires = append(c.requires, r)
}

// Requires yields requires clauses of this contract
// @ensures len(r) == len(c.requires)
func (c *FuncContract) Requires() (r []Requires) {
	defer func() {
		if !(len(r) == len(c.requires)) {
			panic("@ensures len(r) == len(c.requires) not satisfied")
		}
	}()
	return c.requires
}

// AddEnsures adds a ensures to this contract
// @ensures c.ensures[len(c.ensures)-1] == e
func (c *FuncContract) AddEnsures(e Ensures) {
	defer func() {
		if !(c.ensures[len(c.ensures)-1] == e) {
			panic("@ensures c.ensures[len(c.ensures)-1] == e not satisfied")
		}
	}()
	c.ensures = append(c.ensures, e)
}

// Ensures yields ensures clauses of this contract
func (c *FuncContract) Ensures() []Ensures {
	return c.ensures
}

// Requires is a @requires clause of a contract
type Requires struct {
	expr string
}

// NewRequires creates a Requires object
// @requires expr != ""
func NewRequires(expr string) Requires {
	if !(expr != "") {
		panic("@requires expr != \"\" not satisfied")
	}

	return Requires{expr: expr}
}

// ExpandedExpression yields the expanded requires' expression
func (r Requires) ExpandedExpression() string {
	return r.expr
}

func (r Requires) String() string {
	return "@requires " + r.expr
}

// Ensures is a @ensures clause of a contract
type Ensures struct {
	expr string
}

// NewEnsures creates a Ensures object
// @ensures expr != ""
func NewEnsures(expr string) Ensures {
	defer func() {
		if !(expr != "") {
			panic("@ensures expr != \"\" not satisfied")
		}
	}()
	return Ensures{expr: expr}
}

// ExpandedExpression yields the expanded ensures' expression
func (r Ensures) ExpandedExpression() string {
	return r.expr
}

func (r Ensures) String() string {
	return "@ensures " + r.expr
}
