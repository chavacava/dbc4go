// Code generated by dbc4go, DO NOT EDIT.
package testdata

// @invariant dummy invariant: /
// true == true
type multilineType struct{}

func (m multilineType) foo() {
	{ // Open contract scope
		// Type invariants
		{
			cond := func() bool { return true == true }
			if !cond() {
				panic("(type invariant) function caller didn't satisfy dummy invariant")
			}
		}
		defer func() {
			{
				cond := func() bool { return true == true }
				if !cond() {
					panic("function didn't satisfy dummy invariant")
				}
			}
		}()
	} // Close contract scope
}

// Contract:
//   - invariant dummy invariant: /
//     true == true
type multilineType2 struct{}

func (m multilineType2) foo() {
	{ // Open contract scope
		// Type invariants
		{
			cond := func() bool { return true == true }
			if !cond() {
				panic("(type invariant) function caller didn't satisfy dummy invariant")
			}
		}
		defer func() {
			{
				cond := func() bool { return true == true }
				if !cond() {
					panic("function didn't satisfy dummy invariant")
				}
			}
		}()
	} // Close contract scope
}

// @requires dummy requirement: /
//
//	true == true
func multilineRaw() {
	{ // Open contract scope
		// Function's contracts
		{
			cond := func() bool { return true == true }
			if !cond() {
				panic("function caller didn't satisfy dummy requirement")
			}
		}
	} // Close contract scope

}

// Contract:
//   - ensures dummy clause: /
//     true == false
func multilineStandard() {
	{ // Open contract scope
		// Function's contracts
		defer func() {
			{
				cond := func() bool { return true == false }
				if !cond() {
					panic("function didn't satisfy dummy clause")
				}
			}
		}()
	} // Close contract scope

}
