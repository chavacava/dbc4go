// Code generated by dbc4go, DO NOT EDIT.
package testdata

// @ensures all returned elements are positive: @forall e @in r: e > 0
func square(a []int) (r []int) {
	{ // Open contract scope
		// Function's contracts
		defer func() {
			{
				cond := func() bool {
					for _, e := range r {
						cond := func() bool { return e > 0 }
						if !cond() {
							return false
						}
					}
					return true
				}
				if !cond() {
					panic("function didn't satisfy all returned elements are positive")
				}
			}
		}()
	} // Close contract scope

	// implementation
}

// @ensures @forall e @in r: e > 0 ==> e % 2 == 0
func foo(a []int) (r []int) {
	{ // Open contract scope
		// Function's contracts
		defer func() {
			{
				cond := func() bool {
					for _, e := range r {
						cond := func() bool {
							cond1 := func() bool { return e > 0 }
							cond2 := func() bool { return e%2 == 0 }
							return !cond1() || cond2()
						}
						if !cond() {
							return false
						}
					}
					return true
				}
				if !cond() {
					panic("function didn't satisfy @forall e @in r: e > 0 ==> e % 2 == 0")
				}
			}
		}()
	} // Close contract scope

	// implementation
}
