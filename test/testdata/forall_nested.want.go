// Code generated by dbc4go, DO NOT EDIT.
package testdata

// @ensures result is sorted: @forall i @indexof r: @forall j @indexof r: i <= j ==> r[i] <= r[j]
func sort(a []int) (r []int) {
	{ // Open contract scope
		// Function's contracts
		defer func() {
			{
				cond := func() bool {
					for i, _ := range r {
						cond := func() bool {
							for j, _ := range r {
								cond := func() bool {
									cond1 := func() bool { return i <= j }
									cond2 := func() bool { return r[i] <= r[j] }
									return !cond1() || cond2()
								}
								if !cond() {
									return false
								}
							}
							return true
						}
						if !cond() {
							return false
						}
					}
					return true
				}
				if !cond() {
					panic("function didn't satisfy result is sorted")
				}
			}
		}()
	} // Close contract scope

	// implementation
}

// @ensures @forall i @indexof r: @forall j @indexof r: i != j ==> r[i] != r[j]
func deduplicate(a []int) (r []int) {
	{ // Open contract scope
		// Function's contracts
		defer func() {
			{
				cond := func() bool {
					for i, _ := range r {
						cond := func() bool {
							for j, _ := range r {
								cond := func() bool {
									cond1 := func() bool { return i != j }
									cond2 := func() bool { return r[i] != r[j] }
									return !cond1() || cond2()
								}
								if !cond() {
									return false
								}
							}
							return true
						}
						if !cond() {
							return false
						}
					}
					return true
				}
				if !cond() {
					panic("function didn't satisfy @forall i @indexof r: @forall j @indexof r: i != j ==> r[i] != r[j]")
				}
			}
		}()
	} // Close contract scope

	// implementation
}
