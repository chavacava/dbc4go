// Code generated by dbc4go, DO NOT EDIT.
package testdata

// @ensures something: @exists e @in r: e > 0
func foo(a []int) (r []int) {
	{ // Open contract scope
		// Function's contracts
		defer func() {
			cond := func() bool {
				for e := range r {
					cond := func() bool { return e > 0 }
					if cond() {
						return true
					}
				}
				return false
			}
			if !cond() {
				panic("function didn't ensure @exists e @in r: e > 0")
			}
		}()
	} // Close contract scope

	// implementation
}

// @ensures @exists e @in r: e > 0 ==> e % 2 == 0
func bar(a []int) (r []int) {
	{ // Open contract scope
		// Function's contracts
		defer func() {
			cond := func() bool {
				for e := range r {
					cond := func() bool { return !(e > 0) || (e%2 == 0) }
					if cond() {
						return true
					}
				}
				return false
			}
			if !cond() {
				panic("function didn't ensure @exists e @in r: e > 0 ==> e % 2 == 0")
			}
		}()
	} // Close contract scope

	// implementation
}
